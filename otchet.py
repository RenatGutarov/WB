from total_profit import process_rows, process_rows_delta, process_rows_actions, get_data
from messaging import send_message
import math
from worksheet import Constants, get_sheet_yesterday, get_delta
from spp import get_spp


# –ö–ª—é—á–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
keys = [
    'date', 'day_of_week', 'revenue', 'pieces', 'procent',
    'revenue_buy', 'will_buy', 'cost_price_proc', 'commission',
    'logistic', 'tax', 'storage', 'add', 'drr', 'profit',
    'profitability', 'scarfs_rinok', 'scarfs_check', 'pjms_rinok',
    'pjms_checs', 'spp', 'temp'
]


def get_user_data(user_constants):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å."""
    data_list = process_rows(get_data(user_constants))
    return dict(zip(keys, data_list))


def get_actions(user_constants):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."""
    actions_sheet = get_sheet_yesterday(user_constants)
    actions = actions_sheet.get('1:100')
    return process_rows_actions(actions)


def get_profit_yesterday(user_constants):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å."""
    delta_sheet = get_delta(user_constants)
    delta_data = delta_sheet.get('1:100')
    return process_rows_delta(delta_data)[0]


def calculate_metrics(data_dict, profit_yesterday):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    final_revenue = data_dict['revenue']
    final_profit = data_dict['profit']
    final_profitability = math.floor(final_profit / final_revenue * 100)
    final_drr = math.floor((data_dict['add'] / final_revenue) * 100)
    delta_yesterday = final_profit - profit_yesterday
    return final_revenue, final_profit, final_profitability, final_drr, delta_yesterday


def generate_user_report(data_dict, actions, delta_yesterday):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    report = f'''
üí∞ –í–´–†–£–ß–ö–ê = {data_dict['revenue']}.—Ä
üíµ –í. –ü–†–ò–ë–´–õ–¨ = {data_dict['profit']}.—Ä
üíé –í. –†–ï–ù–¢–ê = {round(data_dict['profitability'] * 100, 2)}%
üí£ –î–†–† = {round(data_dict['drr'] * 100, 2)}%
–ß—Ç–æ —Å–¥–µ–ª–∞–ª–∏ –≤—á–µ—Ä–∞:
{'\n'.join(actions) if actions else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}
'''
    if delta_yesterday < 0:
        report += f'üåπ –î–µ–ª—å—Ç–∞ = {delta_yesterday}.—Ä\n'
    else:
        report += f'üçÄ –î–µ–ª—å—Ç–∞ = {delta_yesterday}.—Ä\n'
    return report


def calculate_final_metrics(danila_metrics, denis_metrics, danila_data, denis_data, profit_yesterday_danila, profit_yesterday_denis):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏."""
    final_revenue = danila_metrics[0] + denis_metrics[0]
    final_profit = danila_metrics[1] + denis_metrics[1]
    final_profitability = math.floor(final_profit / final_revenue * 100)
    final_drr = math.floor((danila_data['add'] + denis_data['add']) / final_revenue * 100)
    delta_yesterday = danila_metrics[4] + denis_metrics[4]
    total_delta = final_profit - (profit_yesterday_danila + profit_yesterday_denis)
    return final_revenue, final_profit, final_profitability, final_drr, delta_yesterday, total_delta


def send_final_report(danila_report, denis_report, final_metrics, spp):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
    final_revenue, final_profit, final_profitability, final_drr, delta_yesterday, total_delta = final_metrics

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –¥–ª—è –æ–±—â–µ–π –¥–µ–ª—å—Ç—ã
    delta_icon = 'üåπ' if total_delta < 0 else 'üçÄ'

    message = f'''
{danila_report}

{denis_report}

–ò–¢–û–ì–û
üí∞ –í–´–†–£–ß–ö–ê = {final_revenue}.—Ä
üíµ –í. –ü–†–ò–ë–´–õ–¨ = {final_profit}.—Ä
{delta_icon} –û–±—â–∞—è –¥–µ–ª—å—Ç–∞ = {total_delta}.—Ä
üíé –í. –†–ï–ù–¢–ê = {final_profitability}%
üí£ –î–†–† = {final_drr}%
–°–ü–ü –ë–´–õ = {spp}%
'''
    send_message(message)


def otchet():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    danila_data = get_user_data(Constants.DANILA)
    denis_data = get_user_data(Constants.DENIS)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    actions_danila = get_actions(Constants.DANILA)
    actions_denis = get_actions(Constants.DENIS)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
    profit_yesterday_danila = get_profit_yesterday(Constants.DANILA)
    profit_yesterday_denis = get_profit_yesterday(Constants.DENIS)

    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    danila_metrics = calculate_metrics(danila_data, profit_yesterday_danila)
    denis_metrics = calculate_metrics(denis_data, profit_yesterday_denis)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    danila_report = generate_user_report(danila_data, actions_danila, danila_metrics[4])
    denis_report = generate_user_report(denis_data, actions_denis, denis_metrics[4])

    # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
    final_metrics = calculate_final_metrics(
        danila_metrics, denis_metrics, danila_data, denis_data, profit_yesterday_danila, profit_yesterday_denis
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –°–ü–ü
    spp = get_spp(Constants.DENIS)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    send_final_report(danila_report, denis_report, final_metrics, spp)


if __name__ == '__main__':
    otchet()


